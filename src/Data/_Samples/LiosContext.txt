using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Data.Entity.Validation;
using System.Linq;
using System.Text;
using LIOS.Model;

namespace LIOS.Data {
  public class LiosContext : DbContext {
    // data binding
    public DbSet<Distributor> Distributors { get; set; }
    public DbSet<DistributorAddress> DistributorAddresses { get; set; }
    public DbSet<DistributorPrivateLabel> DistributorPrivateLabels { get; set; }
    public DbSet<Form> Forms { get; set; }
    public DbSet<License> Licenses { get; set; }
    public DbSet<Manufacturer> Manufacturers { get; set; }
    public DbSet<Price_Class> PriceClasses { get; set; }
    public DbSet<FreightForwarder> FreightForwarders { get; set; }
    public DbSet<FreightTerm> FreightTerms { get; set; }
    public DbSet<BaseItem> BaseItems { get; set; }
    public DbSet<ItemCategory> ItemCategories { get; set; }
    public DbSet<ItemAssortment> ItemAssortmentses { get; set; }
    public DbSet<BaseItemChange> BaseItemChanges { get; set; }
    public DbSet<BaseItemHistory> BaseItemHistories { get; set; }
    public DbSet<ItemCartonCombo> ItemCartonCombos { get; set; }
    public DbSet<ItemManufacturer> ItemManufacturers { get; set; }
    public DbSet<ItemOption> ItemOptions { get; set; }
    public DbSet<OptionGroup> OptionGroups { get; set; }
    public DbSet<OptionGroupCategory> OptionGroupCategories { get; set; }
    public DbSet<Order> Orders { get; set; }
    public DbSet<ShipRequirement> ShipRequirements { get; set; }
    public DbSet<ShipVia> ShipVias { get; set; }
    public DbSet<OrderCharge> OrderCharges { get; set; }
    public DbSet<Packaging> Packagings { get; set; }
    public DbSet<OrderItem> OrderItems { get; set; }
    public DbSet<OrderItemAssortment> OrderItemAssortments { get; set; }
    public DbSet<OrderItemOption> OrderItemOptions { get; set; }
    public DbSet<PaymentTerm> PaymentTerms { get; set; }
    public DbSet<TransactionLog> TransactionLogs { get; set; }
    public DbSet<ItemPackaging> ItemPackagings { get; set; }
    public DbSet<ManufacturerOrder> ManufacturerOrders { get; set; }
    public DbSet<Option> Options { get; set; }

    // PackagingLog
    public DbSet<PackagingLog_Request> PackagingLogRequests { get; set; }

    // Currency
    public DbSet<Currency> Currencies { get; set; }
    public DbSet<CurrencyRatesToUSD> CurrencyRatesToUsds { get; set; }

    // FactorySales
    public DbSet<FactorySales_Sale> FactorySales { get; set; }
    public DbSet<FactorySales_SaleHistory> FactorySaleHistories { get; set; }

    // do when model is created
    protected override void OnModelCreating(DbModelBuilder modelBuilder) {
      var table_prefix = "lnc_";

      // Distributor
      modelBuilder.Entity<Distributor>().ToTable(table_prefix + "Distributor");
      modelBuilder.Entity<Distributor>().Property(x => x.Code).HasColumnName("DistributorCode");

      //modelBuilder.Entity<Distributor>().Property(x => x.Code)
      //  .HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);

      modelBuilder.Entity<Distributor>()
        .HasMany(x => x.Forms).WithMany(x => x.Distributors)
        .Map(x => x.ToTable(table_prefix + "DistributorForm")
                    .MapRightKey("FormCode").MapLeftKey("DistributorCode")); // many-to-many
      modelBuilder.Entity<Distributor>()
        .HasMany(x => x.Licenses).WithMany(x => x.Distributors)
        .Map(x => x.ToTable(table_prefix + "DistributorLicense")
                    .MapRightKey("LicenseID").MapLeftKey("DistributorCode")); // many-to-many
      modelBuilder.Entity<Distributor>()
        .HasMany(x => x.Manufacturers).WithMany(x => x.Distributors)
        .Map(x => x.ToTable(table_prefix + "DistributorManufacturer")
                    .MapRightKey("ManufacturerCode").MapLeftKey("DistributorCode")); // many-to-many

      // DistributorAddress
      modelBuilder.Entity<DistributorAddress>().ToTable(table_prefix + "DistributorAddress");
      modelBuilder.Entity<DistributorAddress>()
        .HasRequired(x => x.Distributor).WithMany(x => x.DistributorAddresses)
        .HasForeignKey(x => x.DistributorCode);

      // DistributorPrivateLabel
      modelBuilder.Entity<DistributorPrivateLabel>().ToTable(table_prefix + "DistributorPrivateLabel");
      modelBuilder.Entity<DistributorPrivateLabel>()
        .HasRequired(x => x.Distributor).WithMany(x => x.DistributorPrivateLabels)
        .HasForeignKey(x => x.DistributorCodeFk);

      // Form
      modelBuilder.Entity<Form>().ToTable(table_prefix + "Form");
      modelBuilder.Entity<Form>().Property(x => x.Code).HasColumnName("FormCode");

      // License
      modelBuilder.Entity<License>().ToTable(table_prefix + "License");
      modelBuilder.Entity<License>().Property(x => x.Id).HasColumnName("LicenseID");

      // Manufacturer
      modelBuilder.Entity<Manufacturer>().ToTable(table_prefix + "Manufacturer");
      modelBuilder.Entity<Manufacturer>().Property(x => x.Code).HasColumnName("ManufacturerCode");

      // Price_Class
      modelBuilder.Entity<Price_Class>().ToTable(table_prefix + "PriceClass");
      modelBuilder.Entity<Price_Class>().Property(x => x.Id).HasColumnName("PriceClassID");
      modelBuilder.Entity<Price_Class>().Property(x => x.Name).HasColumnName("PriceClass");
      modelBuilder.Entity<Price_Class>()
        .HasMany(x => x.Distributors).WithRequired(x => x.PriceClass)
        .HasForeignKey(x => x.PriceClassId);

      // FreightForwarder
      modelBuilder.Entity<FreightForwarder>().ToTable(table_prefix + "FreightForwarder");
      modelBuilder.Entity<FreightForwarder>()
        .HasRequired(x => x.Distributor).WithMany(x => x.FreightForwarders)
        .HasForeignKey(x => x.DistributorCode);

      // FreightTerm
      modelBuilder.Entity<FreightTerm>().ToTable(table_prefix + "FreightTerms");

      // BaseItem
      modelBuilder.Entity<BaseItem>().ToTable(table_prefix + "ItemBase");
      modelBuilder.Entity<BaseItem>().Property(x => x.ItemNumber).HasColumnName("BaseItemNumber");
      modelBuilder.Entity<BaseItem>()
        .HasRequired(x => x.ItemCategory).WithMany(x => x.BaseItems)
        .HasForeignKey(x => x.ItemCategoryID);

      // ItemCategory
      modelBuilder.Entity<ItemCategory>().ToTable(table_prefix + "ItemCategory");
      modelBuilder.Entity<ItemCategory>().Property(x => x.Id).HasColumnName("ItemCategoryID");

      // BaseItemChange
      modelBuilder.Entity<BaseItemChange>().ToTable(table_prefix + "ItemBaseChanges");
      modelBuilder.Entity<BaseItemChange>()
        .HasRequired(x => x.BaseItem).WithMany(x => x.BaseItemChanges)
        .HasForeignKey(x => x.ItemNumberFk);

      // BaseItemHistory
      modelBuilder.Entity<BaseItemHistory>().ToTable(table_prefix + "ItemBaseHistory");
      modelBuilder.Entity<BaseItemHistory>()
        .HasRequired(x => x.BaseItem).WithMany(x => x.BaseItemHistories)
        .HasForeignKey(x => x.BaseItemNumberFk);

      // ItemCartonCombo
      modelBuilder.Entity<ItemCartonCombo>().ToTable(table_prefix + "ItemCartonCombo");
      modelBuilder.Entity<ItemCartonCombo>().Property(x => x.Cost).HasPrecision(18, 4);
      modelBuilder.Entity<ItemCartonCombo>()
        .HasRequired(x => x.BaseItem).WithMany(x => x.ItemCartonCombos)
        .HasForeignKey(x => x.BaseItemNumber);

      // ItemPackaging
      modelBuilder.Entity<ItemPackaging>().ToTable(table_prefix + "ItemPackaging");
      modelBuilder.Entity<ItemPackaging>().Property(x => x.Cost).HasPrecision(18, 4);
      modelBuilder.Entity<ItemPackaging>()
        .HasRequired(x => x.BaseItem).WithMany(x => x.ItemPackagings)
        .HasForeignKey(x => x.BaseItemNumber);
      modelBuilder.Entity<ItemPackaging>()
        .HasRequired(x => x.Packaging).WithMany(x => x.ItemPackagings)
        .HasForeignKey(x => x.PackagingCode);

      // ItemManufacturer
      modelBuilder.Entity<ItemManufacturer>().ToTable(table_prefix + "ItemManufacturer");
      modelBuilder.Entity<ItemManufacturer>().Property(x => x.FirstCost).HasPrecision(18, 4);
      modelBuilder.Entity<ItemManufacturer>().Property(x => x.CostADifference).HasPrecision(18, 4);
      modelBuilder.Entity<ItemManufacturer>()
        .HasRequired(x => x.BaseItem).WithMany(x => x.ItemManufacturers)
        .HasForeignKey(x => x.BaseItemNumber);
      modelBuilder.Entity<ItemManufacturer>()
        .HasRequired(x => x.Manufacturer).WithMany(x => x.ItemManufacturers)
        .HasForeignKey(x => x.ManufacturerCode);

      // ItemAssortment
      modelBuilder.Entity<ItemAssortment>().ToTable(table_prefix + "ItemAssortments");
      modelBuilder.Entity<ItemAssortment>().Property(x => x.Cost).HasPrecision(18, 4);
      modelBuilder.Entity<ItemAssortment>()
        .HasRequired(x => x.BaseItem).WithMany(x => x.ItemAssortments)
        .HasForeignKey(x => x.BaseItemNumber);
      modelBuilder.Entity<ItemAssortment>()
        .HasRequired(x => x.License).WithMany(x => x.ItemAssortments)
        .HasForeignKey(x => x.LicenseId);

      // ItemOption
      modelBuilder.Entity<ItemOption>().ToTable(table_prefix + "ItemOption");
      modelBuilder.Entity<ItemOption>()
        .HasRequired(x => x.OptionGroup).WithMany(x => x.ItemOptions)
        .HasForeignKey(x => x.GroupID);
      modelBuilder.Entity<ItemOption>()
        .HasRequired(x => x.BaseItem).WithMany(x => x.ItemOptions)
        .HasForeignKey(x => x.BaseItemNumber);

      // OptionGroup
      modelBuilder.Entity<OptionGroup>().ToTable(table_prefix + "OptionGroup");
      modelBuilder.Entity<OptionGroup>().Property(x => x.Id).HasColumnName("GroupID");
      modelBuilder.Entity<OptionGroup>()
        .HasRequired(x => x.ItemCategory).WithMany(x => x.OptionGroups)
        .HasForeignKey(x => x.ItemCategoryID);
      modelBuilder.Entity<OptionGroup>()
        .HasRequired(x => x.OptionGroupCategory).WithMany(x => x.OptionGroups)
        .HasForeignKey(x => x.GroupCategoryID);

      // OptionGroupCategory
      modelBuilder.Entity<OptionGroupCategory>().ToTable(table_prefix + "OptionGroupCategory");
      modelBuilder.Entity<OptionGroupCategory>().Property(x => x.Id).HasColumnName("GroupCategoryID");

      // ShipRequirements
      modelBuilder.Entity<ShipRequirement>().ToTable(table_prefix + "ShipRequirements");

      // ShipVia
      modelBuilder.Entity<ShipVia>().ToTable(table_prefix + "ShipVia");
      
      // Packaging
      modelBuilder.Entity<Packaging>().ToTable(table_prefix + "Packaging");
      modelBuilder.Entity<Packaging>().Property(x => x.Code).HasColumnName("PackagingCode");

      // Order
      modelBuilder.Entity<Order>().ToTable(table_prefix + "Order");
      modelBuilder.Entity<Order>().Property(x => x.Id).HasColumnName("OrderId");
      modelBuilder.Entity<Order>().HasKey(x => new { x.Id, x.Revision }); // composite primary key mapping
      modelBuilder.Entity<Order>()
        .HasRequired(x => x.Distributor).WithMany(x => x.Orders)
        .HasForeignKey(x => x.DistributorCode);
      modelBuilder.Entity<Order>()
        .HasRequired(x => x.FreightTerm).WithMany(x => x.Orders)
        .HasForeignKey(x => x.FreightTermsId);
      modelBuilder.Entity<Order>()
        .HasRequired(x => x.DistributorPrivateLabel).WithMany(x => x.Orders)
        .HasForeignKey(x => x.DistributorPrivateLabelFk);
      modelBuilder.Entity<Order>()
        .HasRequired(x => x.ShipRequirement).WithMany(x => x.Orders)
        .HasForeignKey(x => x.ShipRequirementsId);
      modelBuilder.Entity<Order>()
        .HasRequired(x => x.ShipVia).WithMany(x => x.Orders)
        .HasForeignKey(x => x.ShipViaId);
      modelBuilder.Entity<Order>()
        .HasRequired(x => x.PaymentTerm).WithMany(x => x.Orders)
        .HasForeignKey(x => x.PaymentTermsId);
      
      // ManufacturerOrder
      modelBuilder.Entity<ManufacturerOrder>().ToTable(table_prefix + "ManufacturerOrder");
      modelBuilder.Entity<ManufacturerOrder>().Property(x => x.Id).HasColumnName("ManufacturerOrderID");
      modelBuilder.Entity<ManufacturerOrder>()
        .HasRequired(x => x.Manufacturer).WithMany(x => x.ManufacturerOrders)
        .HasForeignKey(x => x.ManufacturerCode);
      modelBuilder.Entity<ManufacturerOrder>()
        .HasRequired(x => x.Order).WithMany(x => x.ManufacturerOrders)
        .HasForeignKey(x => new {x.OrderID, x.Revision}); // composite foreign key mapping

      // OrderCharge
      modelBuilder.Entity<OrderCharge>().ToTable(table_prefix + "OrderCharge");
      modelBuilder.Entity<OrderCharge>().Property(x => x.Id).HasColumnName("OrderChargeID");
      modelBuilder.Entity<OrderCharge>().Property(x => x.Price).HasPrecision(18, 4);
      modelBuilder.Entity<OrderCharge>()
        .HasRequired(x => x.Manufacturer).WithMany(x => x.OrderCharges)
        .HasForeignKey(x => x.ManufacturerCode);
      modelBuilder.Entity<OrderCharge>()
        .HasRequired(x => x.Order).WithMany(x => x.OrderCharges)
        .HasForeignKey(x => new {x.OrderID, x.Revision}); // composite foreign key mapping

      // OrderItem
      modelBuilder.Entity<OrderItem>().ToTable(table_prefix + "OrderItem");
      modelBuilder.Entity<OrderItem>().Property(x => x.Id).HasColumnName("OrderItemID");
      modelBuilder.Entity<OrderItem>().Property(x => x.Price).HasPrecision(18, 4);
      modelBuilder.Entity<OrderItem>()
        .HasRequired(x => x.Manufacturer).WithMany(x => x.OrderItems)
        .HasForeignKey(x => x.ManufacturerCode);
      modelBuilder.Entity<OrderItem>()
        .HasRequired(x => x.Packaging).WithMany(x => x.OrderItems)
        .HasForeignKey(x => x.PackagingCode);
      modelBuilder.Entity<OrderItem>()
        .HasRequired(x => x.Order).WithMany(x => x.OrderItems)
        .HasForeignKey(x => new {x.OrderID, x.OrderRevision}); // composite foreign key mapping

      // OrderItemAssortment
      modelBuilder.Entity<OrderItemAssortment>().ToTable(table_prefix + "OrderItemAssortments");
      modelBuilder.Entity<OrderItemAssortment>()
        .HasRequired(x => x.OrderItem).WithMany(x => x.OrderItemAssortments)
        .HasForeignKey(x => x.OrderItemID);

      // OrderItemOption
      modelBuilder.Entity<OrderItemOption>().ToTable(table_prefix + "OrderItemOption");
      modelBuilder.Entity<OrderItemOption>().Property(x => x.Id).HasColumnName("OrderItemOptionID");
      modelBuilder.Entity<OrderItemOption>()
        .HasRequired(x => x.OrderItem).WithMany(x => x.OrderItemOptions)
        .HasForeignKey(x => x.OrderItemID);

      // PaymentTerm
      modelBuilder.Entity<PaymentTerm>().ToTable(table_prefix + "PaymentTerms");

      // TransactionLog
      modelBuilder.Entity<TransactionLog>().ToTable(table_prefix + "TransactionLog");

      // Option
      modelBuilder.Entity<Option>().ToTable(table_prefix + "Option");
      modelBuilder.Entity<Option>().Property(x => x.Id).HasColumnName("OptionID");
      modelBuilder.Entity<Option>()
        .HasRequired(x => x.License).WithMany(x => x.Options)
        .HasForeignKey(x => x.LicenseID);
      modelBuilder.Entity<Option>()
        .HasRequired(x => x.OptionGroup).WithMany(x => x.Options)
        .HasForeignKey(x => x.GroupID);

      // --------------------------------------------------------------------
      // map other applications
      // --------------------------------------------------------------------
      mapOtherApplications(modelBuilder);
    }
    private void mapOtherApplications(DbModelBuilder modelBuilder) {
      // PackagingLog
      modelBuilder.Entity<PackagingLog_Request>().ToTable("pac_Request");
      modelBuilder.Entity<PackagingLog_Request>()
        .HasRequired(x => x.Packaging).WithMany(x => x.PackagingLogRequests)
        .HasForeignKey(x => x.PackagingCode);
      modelBuilder.Entity<PackagingLog_Request>()
        .HasRequired(x => x.Form).WithMany(x => x.PackagingLogRequests)
        .HasForeignKey(x => x.FormCode);

      // Currency
      modelBuilder.Entity<Currency>().ToTable("Currency");
      modelBuilder.Entity<CurrencyRatesToUSD>().ToTable("CurrencyRatesToUSD");
      modelBuilder.Entity<CurrencyRatesToUSD>()
        .HasRequired(x => x.Currency).WithMany(x => x.CurrencyRatesToUsds)
        .HasForeignKey(x => x.Code);

      // FactorySales
      modelBuilder.Entity<FactorySales_Sale>().ToTable("fsr_Sales");
      modelBuilder.Entity<FactorySales_Sale>()
        .HasMany(x => x.SaleHistories).WithRequired(x => x.Sale)
        .HasForeignKey(x => x.SalesFk);
    }

    // other methods
    public virtual void Commit() {
      try {
        base.SaveChanges();
      }
      catch (DbEntityValidationException ex) {
        var sb = new StringBuilder();
        var currentTitle = string.Empty;
        foreach (var entityValidationResult in ex.EntityValidationErrors.ToList()) {
          if (!entityValidationResult.IsValid) {
            if (currentTitle != entityValidationResult.Entry.Entity.ToString()) {
              currentTitle = entityValidationResult.Entry.Entity.ToString();
              sb.AppendLine(currentTitle);
              foreach (var dbValidationError in entityValidationResult.ValidationErrors) {
                sb.AppendLine("Property: " + dbValidationError.PropertyName +
                              "; Error: " + dbValidationError.ErrorMessage);
              }
            }
          }
        }
        throw new DbEntityValidationException("Entity Validation Exception!\n\n" + sb);
      }
    }
    public string DumpScript() {
      return ((IObjectContextAdapter) this).ObjectContext.CreateDatabaseScript();
    }

  }
}